CREATE DOMAIN public.user_role AS text CHECK (VALUE IN ('administrator', 'dosen', 'mahasiswa'));
alter domain public.user_role owner to admin;
create domain public.email_address as text constraint valid_email_format check (value ~* '^(?:[^<>()\[\]\\.,;:\s@"]+(?:\.[^<>()\[\]\\.,;:\s@"]+)*|".+")@((?:\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(?:[a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,})$');
alter domain public.email_address owner to admin;
create domain public.ethereum_addresses as text constraint valid_ethereum_address check (value ~* '^0x[a-fA-F0-9]{40}$'::text);
alter domain public.ethereum_addresses owner to admin;

create table public.users
(
    user_id                    uuid                     default gen_random_uuid() not null
        primary key
        unique,
    email                      public.email_address                                      not null
        unique,
    password_hash              text                                               not null,
    nickname                       text                                               not null,
    is_verified                boolean                                            not null,
    created_at                 timestamp with time zone default now()             not null,
    role                       public.user_role                                   not null,
    updated_at                 timestamp with time zone default now()             not null
);

alter table public.users owner to admin;

create table public.blockchain_authentication
(
    blockchain_auth_id integer generated by default as identity
        primary key
        constraint blockchain_external_authentication_id_key
            unique,
    public_address     ethereum_addresses             not null
        unique,
    nonce                                             integer
        default 0
                                                      not null
);
alter table public.blockchain_authentication owner to admin;

create table public.users_external_authentication
(
    external_authentication_id integer generated by default as identity
        primary key
        unique,
    user_id uuid not null,
    blockchain_auth_id         integer
        unique
        constraint external_authentication_blockchain_authentication_null_fk
            references public.blockchain_authentication (blockchain_auth_id),
    foreign key (user_id) references public.users (user_id)
);

alter table public.users_external_authentication owner to admin;


create table public.university (
                            university_id integer generated by default as identity
                                primary key
                                not null,
                            name text not null
);

create table public.university_faculty
(
    faculty_id    integer
        not null
        primary key,
    university_id integer
        constraint university_major_university_university_id_fk
        references university (university_id),
    faculty_name  text    not null
);

alter table public.university owner to admin;
alter table public.university_faculty
    owner to admin;

create table public.users_identity
(
    users_identity_id integer generated by default as identity (minvalue 0) not null
        constraint users_identity_pk
            unique
        primary key,
    users_id uuid not null,
    full_name         text    not null,
    foreign key (users_id) references public.users (user_id)
);

alter table public.users_identity
    owner to admin;

create table public.users_university_identity (
    users_university_id integer
      primary key
        not null, -- known as NIM, NPM, NIP, etc.
    users_id uuid not null,
    users_identity_id integer not null,
    university_id integer not null,
    university_faculty_id integer not null,
    foreign key (university_faculty_id) references public.university_faculty (faculty_id),
    foreign key (university_id) references public.university (university_id),
    foreign key (users_identity_id) references public.users_identity (users_identity_id),
    foreign key (users_id) references public.users (user_id)
);
comment on column public.users_university_identity.users_university_id is 'known as NIM, NPM, NIP, etc.';